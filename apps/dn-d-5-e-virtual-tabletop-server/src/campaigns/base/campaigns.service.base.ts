/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Campaigns as PrismaCampaigns,
  User as PrismaUser,
} from "@prisma/client";

export class CampaignsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CampaignsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.campaigns.count(args);
  }

  async campaignsItems(
    args: Prisma.CampaignsFindManyArgs
  ): Promise<PrismaCampaigns[]> {
    return this.prisma.campaigns.findMany(args);
  }
  async campaigns(
    args: Prisma.CampaignsFindUniqueArgs
  ): Promise<PrismaCampaigns | null> {
    return this.prisma.campaigns.findUnique(args);
  }
  async createCampaigns(
    args: Prisma.CampaignsCreateArgs
  ): Promise<PrismaCampaigns> {
    return this.prisma.campaigns.create(args);
  }
  async updateCampaigns(
    args: Prisma.CampaignsUpdateArgs
  ): Promise<PrismaCampaigns> {
    return this.prisma.campaigns.update(args);
  }
  async deleteCampaigns(
    args: Prisma.CampaignsDeleteArgs
  ): Promise<PrismaCampaigns> {
    return this.prisma.campaigns.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.campaigns
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
