/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Characters } from "./Characters";
import { CharactersCountArgs } from "./CharactersCountArgs";
import { CharactersFindManyArgs } from "./CharactersFindManyArgs";
import { CharactersFindUniqueArgs } from "./CharactersFindUniqueArgs";
import { CreateCharactersArgs } from "./CreateCharactersArgs";
import { UpdateCharactersArgs } from "./UpdateCharactersArgs";
import { DeleteCharactersArgs } from "./DeleteCharactersArgs";
import { User } from "../../user/base/User";
import { CharactersService } from "../characters.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Characters)
export class CharactersResolverBase {
  constructor(
    protected readonly service: CharactersService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Characters",
    action: "read",
    possession: "any",
  })
  async _charactersItemsMeta(
    @graphql.Args() args: CharactersCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Characters])
  @nestAccessControl.UseRoles({
    resource: "Characters",
    action: "read",
    possession: "any",
  })
  async charactersItems(
    @graphql.Args() args: CharactersFindManyArgs
  ): Promise<Characters[]> {
    return this.service.charactersItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Characters, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Characters",
    action: "read",
    possession: "own",
  })
  async characters(
    @graphql.Args() args: CharactersFindUniqueArgs
  ): Promise<Characters | null> {
    const result = await this.service.characters(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Characters)
  @nestAccessControl.UseRoles({
    resource: "Characters",
    action: "create",
    possession: "any",
  })
  async createCharacters(
    @graphql.Args() args: CreateCharactersArgs
  ): Promise<Characters> {
    return await this.service.createCharacters({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Characters)
  @nestAccessControl.UseRoles({
    resource: "Characters",
    action: "update",
    possession: "any",
  })
  async updateCharacters(
    @graphql.Args() args: UpdateCharactersArgs
  ): Promise<Characters | null> {
    try {
      return await this.service.updateCharacters({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Characters)
  @nestAccessControl.UseRoles({
    resource: "Characters",
    action: "delete",
    possession: "any",
  })
  async deleteCharacters(
    @graphql.Args() args: DeleteCharactersArgs
  ): Promise<Characters | null> {
    try {
      return await this.service.deleteCharacters(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Characters): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
