/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Characters as PrismaCharacters,
  User as PrismaUser,
} from "@prisma/client";

export class CharactersServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CharactersCountArgs, "select">
  ): Promise<number> {
    return this.prisma.characters.count(args);
  }

  async charactersItems(
    args: Prisma.CharactersFindManyArgs
  ): Promise<PrismaCharacters[]> {
    return this.prisma.characters.findMany(args);
  }
  async characters(
    args: Prisma.CharactersFindUniqueArgs
  ): Promise<PrismaCharacters | null> {
    return this.prisma.characters.findUnique(args);
  }
  async createCharacters(
    args: Prisma.CharactersCreateArgs
  ): Promise<PrismaCharacters> {
    return this.prisma.characters.create(args);
  }
  async updateCharacters(
    args: Prisma.CharactersUpdateArgs
  ): Promise<PrismaCharacters> {
    return this.prisma.characters.update(args);
  }
  async deleteCharacters(
    args: Prisma.CharactersDeleteArgs
  ): Promise<PrismaCharacters> {
    return this.prisma.characters.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.characters
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
