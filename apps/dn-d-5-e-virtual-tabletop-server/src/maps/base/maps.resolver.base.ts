/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Maps } from "./Maps";
import { MapsCountArgs } from "./MapsCountArgs";
import { MapsFindManyArgs } from "./MapsFindManyArgs";
import { MapsFindUniqueArgs } from "./MapsFindUniqueArgs";
import { CreateMapsArgs } from "./CreateMapsArgs";
import { UpdateMapsArgs } from "./UpdateMapsArgs";
import { DeleteMapsArgs } from "./DeleteMapsArgs";
import { User } from "../../user/base/User";
import { MapsService } from "../maps.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Maps)
export class MapsResolverBase {
  constructor(
    protected readonly service: MapsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Maps",
    action: "read",
    possession: "any",
  })
  async _mapsItemsMeta(
    @graphql.Args() args: MapsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Maps])
  @nestAccessControl.UseRoles({
    resource: "Maps",
    action: "read",
    possession: "any",
  })
  async mapsItems(@graphql.Args() args: MapsFindManyArgs): Promise<Maps[]> {
    return this.service.mapsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Maps, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Maps",
    action: "read",
    possession: "own",
  })
  async maps(@graphql.Args() args: MapsFindUniqueArgs): Promise<Maps | null> {
    const result = await this.service.maps(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Maps)
  @nestAccessControl.UseRoles({
    resource: "Maps",
    action: "create",
    possession: "any",
  })
  async createMaps(@graphql.Args() args: CreateMapsArgs): Promise<Maps> {
    return await this.service.createMaps({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Maps)
  @nestAccessControl.UseRoles({
    resource: "Maps",
    action: "update",
    possession: "any",
  })
  async updateMaps(@graphql.Args() args: UpdateMapsArgs): Promise<Maps | null> {
    try {
      return await this.service.updateMaps({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Maps)
  @nestAccessControl.UseRoles({
    resource: "Maps",
    action: "delete",
    possession: "any",
  })
  async deleteMaps(@graphql.Args() args: DeleteMapsArgs): Promise<Maps | null> {
    try {
      return await this.service.deleteMaps(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Maps): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
