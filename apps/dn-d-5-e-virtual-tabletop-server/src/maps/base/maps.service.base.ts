/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Maps as PrismaMaps, User as PrismaUser } from "@prisma/client";

export class MapsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MapsCountArgs, "select">): Promise<number> {
    return this.prisma.maps.count(args);
  }

  async mapsItems(args: Prisma.MapsFindManyArgs): Promise<PrismaMaps[]> {
    return this.prisma.maps.findMany(args);
  }
  async maps(args: Prisma.MapsFindUniqueArgs): Promise<PrismaMaps | null> {
    return this.prisma.maps.findUnique(args);
  }
  async createMaps(args: Prisma.MapsCreateArgs): Promise<PrismaMaps> {
    return this.prisma.maps.create(args);
  }
  async updateMaps(args: Prisma.MapsUpdateArgs): Promise<PrismaMaps> {
    return this.prisma.maps.update(args);
  }
  async deleteMaps(args: Prisma.MapsDeleteArgs): Promise<PrismaMaps> {
    return this.prisma.maps.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.maps
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
